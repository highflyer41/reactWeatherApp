{"version":3,"sources":["fonts/Montserrat-Bold.ttf","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","zipcode","timezone","lat","long","country","temp","city","description","weather","show","dayOneDate","dayOneWeather","dayOneTemp","dayTwoDate","dayTwoWeather","dayTwoTemp","dayThreeDate","dayThreeWeather","dayThreeTemp","showTwo","errMessage","handleClick","zip","document","getElementById","value","cntry","setState","toUpperCase","setTimeout","getWeather","handlePress","key","keyCode","fetch","then","response","ok","Error","json","data","main","name","coord","lon","getMoreWeather","catch","err","console","log","lati","longi","daily","day","getTime","moment","Moment","zone","currentTime","tz","format","day1","add","day2","day3","time","getWeatherPic","param","className","src","alt","style","backgroundImage","id","type","placeholder","onKeyUp","e","defaultValue","onClick","display","this","href","position","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.682513c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Montserrat-Bold.ade91f47.ttf\";","import React, {Component} from 'react';\nimport './App.css';\nimport Moment from 'moment';\nimport 'moment-timezone';\n\nclass App extends Component {\n  state = { \n    zipcode: '',\n    timezone: '',\n    lat: 0,\n    long: 0,\n    country: '',\n    temp: 0,\n    city: '',\n    description: '',\n    weather: '',\n    show: false,\n    dayOneDate: '',\n    dayOneWeather: '',\n    dayOneTemp: 0,\n    dayTwoDate: '',\n    dayTwoWeather: '',\n    dayTwoTemp: 0,\n    dayThreeDate: '',\n    dayThreeWeather: '',\n    dayThreeTemp: 0,\n    showTwo: false,\n    errMessage: '',\n   }\n\n   handleClick = () => {\n     let zip = document.getElementById('input').value;\n     let cntry = document.getElementById('inputCountry').value;\n     this.setState({\n       zipcode: zip,\n       country: cntry.toUpperCase(),\n    });\n     setTimeout(() => {\n        this.getWeather();\n     }, 200);\n   }\n\n   handlePress = (key) => {\n      if(key.keyCode === 13) {\n        this.handleClick();\n      }\n   }\n\n  getWeather = () => {\n    let {zipcode} = this.state;\n    let {country} = this.state;\n    fetch(\"https://api.openweathermap.org/data/2.5/weather?zip=\"+zipcode+\",\"+country+\"&APPID=36de89dd9ba1aaa422fa4d99ab092bef&units=imperial\")\n    .then((response) => {\n      if(!response.ok){\n        this.setState({\n          show: false,\n          showTwo: true,\n        })\n        throw new Error(\"Invalid Zip Code\");\n      }\n      return response.json();\n    })\n    .then((data) => {\n      //console.log(data);\n      this.setState({\n        temp: data.main.temp,\n        city: data.name,\n        lat: data.coord.lat,\n        long: data.coord.lon,\n        description: data.weather[0].description,\n        weather: data.weather[0].main\n      })\n        this.setState({\n          show: true,\n          showTwo: false,\n        });\n        this.getMoreWeather(this.state.lat, this.state.long);\n    })\n    .catch((err) => {\n      console.log(err);\n    })\n  }\n\n  getMoreWeather = (lati, longi) => {\n    fetch(\"https://api.openweathermap.org/data/2.5/onecall?lat=\"+lati+\"&lon=\"+longi+\"&units=imperial&appid=36de89dd9ba1aaa422fa4d99ab092bef\")\n    .then((response) => { return response.json()})\n    .then((response) => {\n      console.log(response);\n      this.setState({\n        timezone: response.timezone,\n        dayOneWeather: response.daily[1].weather[0].main,\n        dayOneTemp: response.daily[1].temp.day,\n        dayTwoWeather: response.daily[2].weather[0].main,\n        dayTwoTemp: response.daily[2].temp.day,\n        dayThreeWeather: response.daily[3].weather[0].main,\n        dayThreeTemp: response.daily[3].temp.day,\n      })\n      this.getTime();\n    })\n  }\n\n  getTime = () => {\n    let moment = Moment();\n    let zone = this.state.timezone;\n    let currentTime = moment.tz(zone).format('dddd, MMMM Do YYYY, h:mm:ss a');\n    let day1 = moment.tz(zone).add(1, 'd').format('dddd, MMMM Do YYYY');\n    let day2 = moment.tz(zone).add(1, 'd').format('dddd, MMMM Do YYYY');\n    let day3 = moment.tz(zone).add(1, 'd').format('dddd, MMMM Do YYYY');\n    //console.log(zone);\n    this.setState({\n      time: currentTime,\n      dayOneDate: day1,\n      dayTwoDate: day2,\n      dayThreeDate: day3,\n    });\n  }\n\n  getWeatherPic = (param) => {\n    switch(param) {\n      case \"Clear\": \n           return <img className='img-fluid' src='https://media.giphy.com/media/QZz9r30N2RM7DFIXqE/source.gif' alt=''/>\n      case \"Thunderstorm\": \n          return <img className='img-fluid' src='https://media.giphy.com/media/xUOwGoNa2uX6M170d2/source.gif' alt=''/>\n      case \"Drizzle\":\n      case \"Rain\":\n          return <img className='img-fluid' src='https://media.giphy.com/media/U7yxnzr21Xhnnb7Zxz/source.gif' alt=''/>\n      case \"Snow\":\n          return <img className='img-fluid' src='https://media.giphy.com/media/6YNgoTEPs6vZe/source.gif'alt=''/>\n      case \"Clouds\":\n          return <img className='img-fluid' src='https://media.giphy.com/media/Ke7i5t6QDmDSO82Uga/source.gif'alt=''/>\n      default:\n          return <img className='img-fluid' src='https://media.giphy.com/media/xUOxfjsW9fWPqEWouI/source.gif'alt=''/>\n    }\n  }\n\n  render() { \n    return ( \n      <div>\n      <div className=\"waveWrapper waveAnimation\">\n        <div className=\"waveWrapperInner bgTop\">\n          <div className=\"wave waveTop\" style={{backgroundImage: \"url('https://front-end-noobs.com/jecko/img/wave-top.png')\"}}>\n            <div className=\"header-content\">\n                <div className=\"inner\">\n            </div></div>\n        <div className=\"waveWrapperInner bgMiddle\">\n            <div className=\"wave waveMiddle\" style={{backgroundImage: \"url('https://front-end-noobs.com/jecko/img/wave-mid.png')\"}}></div>\n          </div>\n          <div className=\"waveWrapperInner bgBottom\">\n            <div className=\"wave waveBottom\" style={{backgroundImage: \"url('https://front-end-noobs.com/jecko/img/wave-bot.png')\"}}></div>\n          </div>\n        </div>\n    </div>\n    </div>\n\n    <div className=\"container page1\" id=\"top\">\n      <div className=\"row\">\n        <div className=\"col-sm-12 col-md-12 col-xs-12 main\">\n        <h1>Weather Checker App</h1>\n        <h4>Check the weather and time by zip code</h4>\n        <input type=\"text\" name=\"input\" id={\"input\"} placeholder=\"zip code: ex. 12345\" onKeyUp={(e) => {this.handlePress(e)}}/>\n        <input type=\"text\" id={\"inputCountry\"} defaultValue=\"us\" placeholder=\"Country Alpha-2 Code\" onKeyUp={(e) => {this.handlePress(e)}}/>\n        <button id=\"inputbtn\" onClick={() => {this.handleClick()}}>Submit</button>\n        <button id=\"threeDayForcast\" style={{display: (this.state.show ? 'inline-block':'none')}}><a href=\"#page2\">Three Day Forecast</a></button>\n      </div></div>\n      <div className=\"row\">\n        <div className=\"col-sm-12 col-md-12 col-xs-12 main2\">\n            <div id=\"datebox\" style={{display: (this.state.show ? 'block':'none')}}>\n              City: <span>{this.state.city}, {this.state.country}, {this.state.zipcode}</span><br/>\n              Local date and time is: <span>{this.state.time}</span><br/>\n              Weather: <span>{this.state.weather} with {this.state.description}</span><br/>\n              And a temperature of: <span>{this.state.temp} degrees Fahrenheit</span><br/>\n              {this.getWeatherPic(this.state.weather)}\n            </div>\n            <div style={{display: (this.state.showTwo ? 'block':'none')}}>\n              <h2>Invalid Zip Code. Try again!</h2>\n            </div>\n        </div>\n      </div></div>\n\n      <div className=\"container\" id=\"page2\" style={{display: (this.state.show ? 'block':'none')}}>\n        <div className=\"row\">\n            <div className=\"col-sm-12 col-md-12 col-xs-12\" id=\"citybox\"><h3>Three day forecast for {this.state.city}, {this.state.country}</h3>\n            </div>\n        </div>\n    <div className=\"row\">\n        <div className=\"col-sm-12 col-md-12 col-xs-12\">\n            <div className=\"card-deck\">\n                <div className=\"card\" id=\"day1\">\n                  {this.getWeatherPic(this.state.dayOneWeather)}\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\" id=\"day1date\">{this.state.dayOneDate}</h5>\n                        <p className=\"card-text\" id=\"day1weather\">Weather: {this.state.dayOneWeather}<br></br>\n                        Temperature: {this.state.dayOneTemp}</p>\n                    </div>\n                </div>\n                <div className=\"card\" id=\"day2\">\n                {this.getWeatherPic(this.state.dayTwoWeather)}\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\" id=\"day2date\">{this.state.dayTwoDate}</h5>\n                        <p className=\"card-text\" id=\"day2weather\">Weather: {this.state.dayTwoWeather}<br></br>\n                        Temperature: {this.state.dayTwoTemp}</p>\n                    </div>\n                </div>\n                <div className=\"card\" id=\"day3\">\n                {this.getWeatherPic(this.state.dayThreeWeather)}\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\" id=\"day3date\">{this.state.dayThreeDate}</h5>\n                        <p className=\"card-text\" id=\"day3weather\">Weather: {this.state.dayThreeWeather}<br></br>\n                        Temperature: {this.state.dayThreeTemp}</p>\n                    </div>\n                </div>\n              </div>\n        </div>\n    </div>\n    <div className=\"row\">\n        <div className=\"col-sm-12 col-md-12 col-xs-12\">\n            <button className=\"homebtn\"><a href=\"#top\">Back to Top</a></button>\n        </div>\n    </div>\n    </div>\n\n    <footer style={{position: (this.state.show ? 'static':'absolute')}}>© 2020 Meng Yang</footer>\n      </div>\n     );\n  }\n}\n \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport './fonts/Montserrat-Bold.ttf';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}